// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package store

import (
	"context"
)

const createReminder = `-- name: CreateReminder :one

INSERT INTO start_page_reminders (text)
VALUES (?)
RETURNING id, text, completed, created_at
`

// -
func (q *Queries) CreateReminder(ctx context.Context, text string) (StartPageReminder, error) {
	row := q.db.QueryRowContext(ctx, createReminder, text)
	var i StartPageReminder
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const createSection = `-- name: CreateSection :one
INSERT INTO start_page_sections (title, position)
VALUES (?, ?)
RETURNING id, title, position
`

type CreateSectionParams struct {
	Title    string
	Position int64
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) (StartPageSection, error) {
	row := q.db.QueryRowContext(ctx, createSection, arg.Title, arg.Position)
	var i StartPageSection
	err := row.Scan(&i.ID, &i.Title, &i.Position)
	return i, err
}

const createSectionItem = `-- name: CreateSectionItem :one

INSERT INTO start_page_section_items (title, url, section_id)
VALUES (?, ?, ?)
RETURNING id, title, url, section_id
`

type CreateSectionItemParams struct {
	Title     string
	Url       string
	SectionID int64
}

// -
func (q *Queries) CreateSectionItem(ctx context.Context, arg CreateSectionItemParams) (StartPageSectionItem, error) {
	row := q.db.QueryRowContext(ctx, createSectionItem, arg.Title, arg.Url, arg.SectionID)
	var i StartPageSectionItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.SectionID,
	)
	return i, err
}

const deleteReminder = `-- name: DeleteReminder :exec
DELETE FROM start_page_reminders
WHERE id = ?
`

func (q *Queries) DeleteReminder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReminder, id)
	return err
}

const deleteSection = `-- name: DeleteSection :exec
DELETE FROM start_page_sections
WHERE id = ?
`

func (q *Queries) DeleteSection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSection, id)
	return err
}

const deleteSectionItem = `-- name: DeleteSectionItem :exec
DELETE FROM start_page_section_items
WHERE id = ?
`

func (q *Queries) DeleteSectionItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSectionItem, id)
	return err
}

const getReminder = `-- name: GetReminder :one
SELECT id, text, completed, created_at FROM start_page_reminders
WHERE id = ? LIMIT 1
`

func (q *Queries) GetReminder(ctx context.Context, id int64) (StartPageReminder, error) {
	row := q.db.QueryRowContext(ctx, getReminder, id)
	var i StartPageReminder
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const getRemindersBetweenDates = `-- name: GetRemindersBetweenDates :many
SELECT id, text, completed, created_at FROM start_page_reminders
WHERE created_at >= date(?) AND created_at <= date(?, '+1 day', '-1 second')
ORDER BY created_at DESC
`

type GetRemindersBetweenDatesParams struct {
	Date   interface{}
	Date_2 interface{}
}

func (q *Queries) GetRemindersBetweenDates(ctx context.Context, arg GetRemindersBetweenDatesParams) ([]StartPageReminder, error) {
	rows, err := q.db.QueryContext(ctx, getRemindersBetweenDates, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageReminder
	for rows.Next() {
		var i StartPageReminder
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRemindersForDate = `-- name: GetRemindersForDate :many
SELECT id, text, completed, created_at FROM start_page_reminders
WHERE created_at >= date(?) AND created_at < date(?, '+1 day')
ORDER BY created_at DESC
`

type GetRemindersForDateParams struct {
	Date   interface{}
	Date_2 interface{}
}

func (q *Queries) GetRemindersForDate(ctx context.Context, arg GetRemindersForDateParams) ([]StartPageReminder, error) {
	rows, err := q.db.QueryContext(ctx, getRemindersForDate, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageReminder
	for rows.Next() {
		var i StartPageReminder
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSection = `-- name: GetSection :one
SELECT id, title, position FROM start_page_sections
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSection(ctx context.Context, id int64) (StartPageSection, error) {
	row := q.db.QueryRowContext(ctx, getSection, id)
	var i StartPageSection
	err := row.Scan(&i.ID, &i.Title, &i.Position)
	return i, err
}

const getSectionItem = `-- name: GetSectionItem :one
SELECT id, title, url, section_id FROM start_page_section_items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSectionItem(ctx context.Context, id int64) (StartPageSectionItem, error) {
	row := q.db.QueryRowContext(ctx, getSectionItem, id)
	var i StartPageSectionItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.SectionID,
	)
	return i, err
}

const getTodaysReminders = `-- name: GetTodaysReminders :many
SELECT id, text, completed, created_at FROM start_page_reminders
WHERE created_at >= date('now', 'start of day') AND created_at < date('now', 'start of day', '+1 day')
ORDER BY created_at DESC
`

func (q *Queries) GetTodaysReminders(ctx context.Context) ([]StartPageReminder, error) {
	rows, err := q.db.QueryContext(ctx, getTodaysReminders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageReminder
	for rows.Next() {
		var i StartPageReminder
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReminders = `-- name: ListReminders :many
SELECT id, text, completed, created_at FROM start_page_reminders
ORDER BY created_at DESC
`

func (q *Queries) ListReminders(ctx context.Context) ([]StartPageReminder, error) {
	rows, err := q.db.QueryContext(ctx, listReminders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageReminder
	for rows.Next() {
		var i StartPageReminder
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSectionItemsBySection = `-- name: ListSectionItemsBySection :many
SELECT id, title, url, section_id FROM start_page_section_items
WHERE section_id = ?
ORDER BY title
`

func (q *Queries) ListSectionItemsBySection(ctx context.Context, sectionID int64) ([]StartPageSectionItem, error) {
	rows, err := q.db.QueryContext(ctx, listSectionItemsBySection, sectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageSectionItem
	for rows.Next() {
		var i StartPageSectionItem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.SectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSections = `-- name: ListSections :many
SELECT id, title, position FROM start_page_sections
ORDER BY position
`

func (q *Queries) ListSections(ctx context.Context) ([]StartPageSection, error) {
	rows, err := q.db.QueryContext(ctx, listSections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StartPageSection
	for rows.Next() {
		var i StartPageSection
		if err := rows.Scan(&i.ID, &i.Title, &i.Position); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReminder = `-- name: UpdateReminder :one
UPDATE start_page_reminders
SET text = ?, completed = ?
WHERE id = ?
RETURNING id, text, completed, created_at
`

type UpdateReminderParams struct {
	Text      string
	Completed bool
	ID        int64
}

func (q *Queries) UpdateReminder(ctx context.Context, arg UpdateReminderParams) (StartPageReminder, error) {
	row := q.db.QueryRowContext(ctx, updateReminder, arg.Text, arg.Completed, arg.ID)
	var i StartPageReminder
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const updateSection = `-- name: UpdateSection :one
UPDATE start_page_sections
SET title = ?, position = ?
WHERE id = ?
RETURNING id, title, position
`

type UpdateSectionParams struct {
	Title    string
	Position int64
	ID       int64
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) (StartPageSection, error) {
	row := q.db.QueryRowContext(ctx, updateSection, arg.Title, arg.Position, arg.ID)
	var i StartPageSection
	err := row.Scan(&i.ID, &i.Title, &i.Position)
	return i, err
}

const updateSectionItem = `-- name: UpdateSectionItem :one
UPDATE start_page_section_items
SET title = ?, url = ?, section_id = ?
WHERE id = ?
RETURNING id, title, url, section_id
`

type UpdateSectionItemParams struct {
	Title     string
	Url       string
	SectionID int64
	ID        int64
}

func (q *Queries) UpdateSectionItem(ctx context.Context, arg UpdateSectionItemParams) (StartPageSectionItem, error) {
	row := q.db.QueryRowContext(ctx, updateSectionItem,
		arg.Title,
		arg.Url,
		arg.SectionID,
		arg.ID,
	)
	var i StartPageSectionItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.SectionID,
	)
	return i, err
}
